class pluk.io.DataOStream: OStream
{
  OStream stream;
  Array<Byte> intBuffer = new(1, byte.FromInt(0));
  
  this(OStream stream)
  {
    this.stream = stream;
  }
  
  void WriteInteger(int value)
  {
//    Console.WriteLine("WI:"+value);
    while (true)
    {
      var part = value % 128;
      value = value >> 7;
      if (value != 0)
        part = part + 128;
      intBuffer[0] = byte.FromInt(part);
      if (Write(intBuffer, 0, 1, 1) != 1)
        throw new IOException("Failed to write to stream.");
      if (value == 0)
        return;
    }
  }

  void WriteString(string value)
  {
    int length = Utf8Encoding.StringToByteArray(value, intBuffer, 0, 0, false);
    WriteInteger(length);
    if (length == 0)
      return;
    Array<byte> buffer = new(length, Byte.FromInt(0));
    if (Utf8Encoding.StringToByteArray(value, buffer, 0, length, false) != length)
      throw new IOException("Failed to convert string data to UTF-8.");
    if (Write(buffer, 0, length, length) != length)
      throw new IOException("Failed to write to stream.");
  }

  override int Write(Array<Byte> buffer, int offset, int length, int limit)
  {
    return stream.Write(buffer, offset, length, limit);
  }
  
  override void Close()
  {
    stream.Close();
  }
  
  override Waitable WaitableForWrite()
  {
    return stream.WaitableForWrite();
  }
  
  override void Dispose()
  {
    stream.Dispose();
  }
}