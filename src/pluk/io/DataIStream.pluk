class pluk.io.DataIStream : IStream
{
  IStream stream;
  Array<Byte> intBuffer = new(16, Byte.FromInt(0));
  
  this(IStream stream)
  {
    this.stream = stream;
  }

  int ReadInteger()
  {
    int result = 0;
    int idx = 0;
    while(true)
    {
      if (Read(intBuffer, idx, 1, 1) != 1)
        throw new IOException("Eof reached unexpectedly.");
      int v = intBuffer[idx].ToInt();
      if (v < 128)
        break;
      idx = idx + 1;
    }
    while (idx >= 0)
    {
      int v = intBuffer[idx].ToInt();
      if (v >= 128)
        v = v - 128;
      result = (result << 7)+ v;
      idx = idx - 1;
    }
//    Console.WriteLine("RI:"+result);
    return result;
  }

  string ReadString()
  {
    var length = ReadInteger();
    if (length == 0)
      return "";
    Array<byte> buffer = new(length, Byte.FromInt(0));
    if (Read(buffer, 0, length, length) != length)
      throw new IOException("Eof reached unexpectedly.");
    return Utf8Encoding.StringFromByteArray(buffer, 0, length);
  }
  
  override int Read(Array<Byte> buffer, int offset, int length, int limit)
  {
    return stream.Read(buffer, offset, length, limit);
  }
  
  override void Close()
  {
    stream.Close();
  }
  
  override Waitable WaitableForRead()
  {
    return stream.WaitableForRead();
  }
  
  override void Dispose()
  {
    stream.Dispose();
  }
}