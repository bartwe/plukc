enum pluk.io.FileMode
{
  CreateNew, Create, Open, OpenOrCreate, Truncate, Append
}

class pluk.io.FileStream : PositionableStream
{
  InnerFileStream impl = new();
  bool closed = false;

  this(string filename)
    : this(filename, FileMode.OpenOrCreate)
  {
  }
  
  this(string filename, FileMode mode)
  {
    if (mode == FileMode.CreateNew)
      impl.Open(filename, true, true, false, true, true, false);
    if (mode == FileMode.Create)
      impl.Open(filename, true, true, false, true, false, true);
    if (mode == FileMode.Open)
      impl.Open(filename, true, true, false, false, false, false);
    if (mode == FileMode.OpenOrCreate)
      impl.Open(filename, true, true, false, true, false, false);
    if (mode == FileMode.Truncate)
      impl.Open(filename, true, true, false, false, false, true);
    if (mode == FileMode.Append)
      impl.Open(filename, false, true, true, false, false, false);
    if (impl.HasError)
      throw new IOException(impl.GetErrorMessage()+" while accessing "+filename);
  }
  
  override int Position
  {
    get
    {
      if (closed)
        throw new IOException("Stream is closed.");
      int r = impl.GetPosition();
      if (r == -1)
        throw new IOException(impl.GetErrorMessage());
      return r;                
    }
    set
    {
      if (closed)
        throw new IOException("Stream is closed.");
      if (value < 0)
        throw new ArgumentException("value");
      if (!impl.SetPosition(value))
        throw new IOException(impl.GetErrorMessage());
    }
  }

  override int Read(Array<Byte> buffer, int offset, int length, int limit)
  {
    if (closed)
      throw new IOException("Stream is closed.");
    if (limit < 0)
      throw new ArgumentException("limit");
    if ((length < 0) || (length > limit))
      throw new ArgumentException("length");
    if ((offset < 0) || (offset+limit > buffer.Length))
      throw new ArgumentException("offset");
    if (limit == 0)
      return 0;
    int res = 0;
    while (true)
    {
      int r = impl.Read(buffer, offset + res, limit - res);
      if (r == -2)
        throw new IOException(impl.GetErrorMessage());
      if (r == -1)
      {
        if (res == 0)
          return -1;
        else
          return res;
      }
      res = res + r;
      if (res >= length)
        return res;
      if (r == 0)
        FiberProcessor.Yield(WaitableForRead());
    }
  }
  
  override int Write(Array<Byte> buffer, int offset, int length, int limit)
  {
    if (closed)
      throw new IOException("Stream is closed.");
    if (limit < 0)
      throw new ArgumentException("limit");
    if ((length < 0) || (length > limit))
      throw new ArgumentException("length");
    if ((offset < 0) || (offset+limit > buffer.Length))
      throw new ArgumentException("offset");
    if (limit == 0)
      return 0;
    int res = 0;
    while (true)
    {
      int r = impl.Write(buffer, offset + res, limit - res);
      if (r == -1)
        throw new IOException("EOF during write call.");
      if (r == -2)
        throw new IOException(impl.GetErrorMessage());
      res = res + r;
      if (res >= length)
        return res;
      if (r == 0)
        FiberProcessor.Yield(WaitableForWrite());
    }
  }
  
  override Waitable WaitableForRead()
  {
    if (closed)
      throw new IOException("Stream is closed.");
    return impl.WaitableForRead();
  }
  
  override Waitable WaitableForWrite()
  {
    if (closed)
      throw new IOException("Stream is closed.");
    return impl.WaitableForWrite();
  }
  
  override void Close()
  {
    if (!closed)
    {
      closed = true;
      if (!impl.Close())
        throw new IOException(impl.GetErrorMessage());
    }
  }
  
  override void Dispose()
  {
    if (!closed)
      Close();
  }
}

private class pluk.io.InnerFileStream
{
  int handle = 0;
  int errno = 0;
  
  extern void Open(string name, bool read, bool write, bool append, bool create, bool createOnly, bool truncate);
  
  bool HasError
  {
    get
    {
      return errno != 0;
    }
  }
  
  Waitable WaitableForRead()
  {
    return new ReadHandleWaitable(handle);
  }
  
  Waitable WaitableForWrite()
  {
    return new WriteHandleWaitable(handle);
  }
  
  extern string GetErrorMessage();
  
  extern int Read(Array<Byte> buffer, int offset, int limit);
  extern int Write(Array<Byte> buffer, int offset, int limit);
  extern bool Close();
  
  extern int GetPosition();
  extern bool SetPosition(int offset);
}